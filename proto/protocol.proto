syntax = "proto3";

import "google/protobuf/empty.proto";

package security_chat;

message Check {
  string nickname = 1;
  string authkey = 2;
}

message RegistrationRequest { string nickname = 1; }

message RegistrationReply {
  string authkey = 1;
}

message NicknameIsTakenRequest { string nickname = 1; }

message NicknameIsTakenReply { bool is_taken = 1; }

message CheckValidRequest {
  string nickname = 1;
  string authkey = 2;
}

message SendAESKeyRequest {
  Check nickname_to = 1;
  string nickname_from = 3;
  bytes public_key = 4;
}

message GetAESKeyRequest { Check nickname = 1; }

message AESKeyInfo {
  int64 id = 1;
  string nickname_to = 2;
  string nickname_from = 3;
  bytes nickname_to_public_key = 4;
  optional bytes nickname_from_public_key = 5;
}

message GetAESKeyReply {
  repeated AESKeyInfo info = 1;
}

message DeleteAESKeyRequest {
  Check nickname = 1;
  int64 id = 2;
}

message SetUserFromAESKeyRequest {
  Check nickname = 1;
  int64 id = 2;
  bytes public_key = 3;
}

message CheckValidReply {
  bool is_valid = 1;
}

message Notification {
  string nickname_from = 1; // Для кого это нужно отправить
  string by_nickname = 2; // Кто это создал

  oneof notice {
    Message new_message = 3;
    AESKeyInfo new_send_aes_key = 4;
    AESKeyInfo new_accept_aes_key = 5;
  }
}

message Message {
  bytes body = 1; // ENCRYPTED !!!
  bytes nonce = 2;
}

message SendMessageRequest {
  Check nickname = 1;
  string nickname_from = 2;
  Message message = 3;
}

message MessageInfo {
  Message body = 1;
  string sender_nickname = 2;
  string recipient_nickname = 3;
}

message GetLatestMessagesReply {
  repeated MessageInfo messages = 1;
}

message GetLatestMessagesRequest {
  Check nickname = 1;
  int64 get_limit = 2;
  repeated string nickname_for_get = 3;
}

service SecurityChat {
  rpc Registration(RegistrationRequest) returns (RegistrationReply);

  rpc CheckValid(CheckValidRequest) returns (CheckValidReply);

  rpc NicknameIsTaken(NicknameIsTakenRequest) returns (NicknameIsTakenReply);

  rpc SendAESKey(SendAESKeyRequest) returns (google.protobuf.Empty);

  rpc GetAESKey(GetAESKeyRequest) returns (GetAESKeyReply);

  rpc SetUserFromAESKey(SetUserFromAESKeyRequest)
      returns (google.protobuf.Empty);

  rpc DeleteAESKey(DeleteAESKeyRequest) returns (google.protobuf.Empty);

  rpc Subscribe(Check) returns (stream Notification);

  rpc SendMessage(SendMessageRequest) returns (google.protobuf.Empty);

  rpc GetLatestMessages(GetLatestMessagesRequest) returns (GetLatestMessagesReply);
}
